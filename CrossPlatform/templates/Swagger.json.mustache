{{<schema-fuer-typ}}
    {{#typeSwagger}}
        {{!HACK: Enums, Records und Arrays, die separat definiert werden und referenziert werden müssen
                 haben den gleichen Swagger- wie Source-Typ. Alle integrierten Typen habe einen eigenen
                 Swagger-Typ}}
        {{#Equals typeSwagger,typeSource}}
            { "$ref": "#/definitions/{{typeSwagger}}" }
        {{/Equals}}
        {{^Equals typeSwagger,typeSource}}
            {{typeSwagger}}
        {{/Equals}}
    {{/typeSwagger}}
    {{^typeSwagger}}
        {{#nestedSimpleArray}}
            { 
                "type": "array",
                "items": {{>schema-fuer-typ}}
            }
        {{/nestedSimpleArray}}
    {{/typeSwagger}}
{{/schema-fuer-typ}}
{
    "swagger": "2.0",
    "info": {
        "description": "Generated by mORMot {{mORMotVersion}} at {{time}}",
        "title": "mORMot -> Swagger"
    },
    "host": "{{host}}",
    "basePath": "/{{root}}",
    "tags": [
	  {{#soa}} {{#services}}
		{
			"name": "{{uri}}",
			"description": "Everything about {{uri}}"
		} {{^-last}},{{/-last}} 

	  {{/services}} {{/soa}}
	],
    "definitions": {
        {{! Records }}
      {{#records}}
        "{{name}}": { 
            "type": "object",
            "properties": {
              {{#fields}}
                "{{propName}}": {{>schema-fuer-typ}} {{^-last}},{{/-last}} 
              {{/fields}}
            }
        },
      {{/records}}
        
        {{! Arrays }}
      {{#arrays}}
        "{{name}}": {
            "type": "array",
            "items": {{>schema-fuer-typ}}
        },
      {{/arrays}}
        

{{#enumerates}} 
       "{{name}}": {
          "type": "string",
          "enum": [
               {{#values}}
               "{{.}}" {{^-last}},{{/-last}} 
               {{/values}}
          ],           
          "required": true  
       },
{{/enumerates}}
        {{!HACK: Sonst haben wir ein einzelnes Komma am Schluss }}
        "__dummy__": {"type":"string"}
    },
    "paths": {
      {{#soa}} {{#services}}
      {{#methods}}
        "/{{uri}}/{{methodName}}": {
            "post": {
		"description": {{jsonQuote methodDescription}},
		"tags": ["{{uri}}"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "schema": {
                        "type": "object",
                        "properties": {
                          {{#args}}{{#dirInput}} 
                            "{{argName}}": {{>schema-fuer-typ}}{{commaInSingle}}
                          {{/dirInput}}{{/args}}
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "array",
                                    "items": [
                                        {{#args}} {{#dirOutput}}
                                            {{>schema-fuer-typ}}{{#commaOutResult}},{{/commaOutResult}}
                                        {{/dirOutput}}{{/args}}
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        } {{^-last}},{{/-last}}
      {{/methods}} {{^-last}},{{/-last}}


      {{/services}} {{/soa}}
    }
}